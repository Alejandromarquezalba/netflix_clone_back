generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  planId    String?
  role      UserRole  @default(USER)
  profiles  Profile[]
  plan      Plan?     @relation("UserPlan", fields: [planId], references: [id])
  watchlist Movie[]   @relation("Watchlist")
}

model Profile {
  id                String          @id @default(uuid())
  name              String
  userId            String
  pin               String?
  ageRestriction    AgeRatingEnum
  autoPlay          Boolean         @default(true)
  avatarUrl         String?
  createdAt         DateTime        @default(now())
  hasPin            Boolean         @default(false)
  preferredLanguage String?
  type              ProfileTypeEnum
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  watched           Movie[]         @relation("WatchedMovies")
}

model Movie {
  id            String       @id @default(uuid())
  title         String
  description   String?
  duration      Int?
  releaseYear   Int
  coverUrl      String
  addedAt       DateTime     @default(now())
  genres        String[]
  videoMetadata Json         @default("{}")
  watchedBy     Profile[]    @relation("WatchedMovies")
  watchlist     User[]       @relation("Watchlist")
}

model Plan {
  id              String       @id @default(uuid())
  name            String       @unique
  price           Float
  resolution      String
  allowDownloads  Boolean
  createdAt       DateTime     @default(now())
  description     String?
  freeTrialDays   Int?         @default(0)
  hasAds          Boolean
  isActive        Boolean      @default(true)
  maxProfiles     Int
  maxScreens      Int
  maxVideoQuality VideoQuality
  type            PlanType
  updatedAt       DateTime     @updatedAt
  users           User[]       @relation("UserPlan")
}

model first_table {
  id_first_table Int            @id(map: "first_table_pk") @default(autoincrement())
  name_char      String         @default("Nombre no proporcionado") @db.VarChar
  second_table   second_table[]

  @@ignore
}

model second_table {
  id_second_table                            Int          @id(map: "second_table_pk") @default(autoincrement())
  story_char                                 String?      @db.VarChar
  colum_creada_para_el_fk_con_first_table_fk Int?
  first_table                                first_table? @relation(fields: [colum_creada_para_el_fk_con_first_table_fk], references: [id_first_table], onDelete: NoAction, onUpdate: NoAction, map: "second_table_first_table_fk")

  @@ignore
}

model tabla_exclusiva {
  una_columna_extra String? @db.VarChar

  @@ignore
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum ProfileTypeEnum {
  ADULT
  CHILD
}

enum AgeRatingEnum {
  ALL
  KIDS
  TEEN
  MATURE
}

/*
enum MovieGenre {
  ACTION
  COMEDY
  DOCUMENTARY
}
*/

enum PlanType {
  BASIC
  STANDARD
  PREMIUM
  FAMILY
}

enum VideoQuality {
  SD
  HD
  FHD
  UHD
}
